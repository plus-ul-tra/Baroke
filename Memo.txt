Timer에 관하여
SSoT(single source of truth)
Engine 에서 engineTimer 사용
Client에서 engineTimer에 받은 시간을 조작(배율, 정지)해서 game에 사용.


Render에서
HLSL 활용 연구 필요
(simple 2d light, shader , post processing) 

api 활용, 옵션 사용값 공부,
조작에 필요한 정도만


GameManager 와 각종 Manager 관계
GameManager에 모두 등록후 사용은 X -> 강한결합
GameManager에서 부트스트랩 역할만 수행, 이후 개별 사용
연결이 필요한 경우 이벤트 시스템 구현활용

GameManager는 개발하는 Game에 맞춰야하기 때문에 client 에서 구현하는게 맞고
engine에서 지원하는 기능을 가져와서 쓰는게 맞다는 생각


Scene Manager 는 renderer즉 그림을 그릴 수 있는 system을 들고 있음
Scene은 Scene Manager에게 그릴 Object를 전달
Object 들은 그려질 정보들을 가지고 있음, (texture, 등) -> 이것을 component로 object에 등록
유사 ECS? 


Scene의 구성에 관하여
Scene을 enum으로 역할을 부여하고 이를 벡터로 구분했을때, 발생하는 문제는
enum GameScene이 1개 이상 필요한 경우 식별이 불가함,
방법은 1. enum을 계속 늘린다. (gameScene1, gameScene2, ... )이경우 게임 개발 시 engine의 코드를 직접 조작해야 한다는 단점
2. 추가할때 이름으로 식별한다. 성능 오버헤드가 있지만, 식별, 유동적인 추가, 개발이 가능할 것으로 보임
그렇다면 씬의 index관리는 이름으로 관리하기위해 map 과 index 맵핑 (key 중복방지 가능)
 scene 실객체는 vector로 최적화관리
-------------------------------------------------------------------------------
scene class 와 scene manager 의 관계정립은 engine에서
scene을 가져와서 구체화 하는 것(오브젝트 배치, 버튼 배치, 음악)은 Client에서

Scene은 load 를 통해 미리 초기화 -> 완료상태
ChangeScene을 통해 실질적인 교체
이를 통해 씬 전환에 대한 딜레이를 없앨 수 있음
하지만 게임이 단방향 진행 구조로 설계된 경우 or 씬 전환이 많지 않은 경우 프로그램 시작에서
전부 load해 두면 되기때문에 쓸모가 없을 수 있다.
씬을 분기하여 사용하는 경우에도 사용하지 않으면 load 자체를 하지 않아 최적화에는 이점이 있겠으나
아직은 모르겠음

Object는 종류별로 관리 (Render의 편의를 위해)
Static  : 배경, 꾸미기 등 움직임이 필요하지 않은 것
Actor  : 움직이거나 조작해서 변화하는 것들
UI      : UI

Object 관리는 무엇으로 할까 object가 많을 것 같지는 않은데

1. Render 를 SceneManager에서 하는게 맞는가?
2. Render queue를 구성해서 같은 종류 Object z, order에 따라서 먼저 그리기 

SceneManager에서 Renderer 관리하고 현재 scene에 의존성 주입을 통해 그리자


Core 에 Mainapp 기능 하나로 병합

GameManager 에서 Loop 관리는 아닌거 같은데
Core 라는 최상위 게임 객체를 만들고 관리
GameManager 는 개발하는 게임에 대한 로직만 포함할것

실제 객체들은 Core에서 들고 있을 것이고, GameManager의 값들을 확인해서
게임에 반영  -> (매 프레임마다 GameManager flags 확인 하면 소요가 클 것 같은데)

ManagerBootStrap 도 Core로

Timer 는 엔진 내부
GameTimer 는 클라이언트 Timer 의존

Core는 두개다 사용 IGameTimer 로 의존성받음


// Object, UI, Actor, Static은 client에서 구현됨
// SceneBase에서는 UI, Actor, Static 를 모름 -> Object로 묶어서 관리하기











































